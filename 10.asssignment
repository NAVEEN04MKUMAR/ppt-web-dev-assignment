# Assignment Questions 10

<aside>
üí° **Q.1** Explain Middlewares in NodeJS ?
In Node.js, middlewares are functions or pieces of code that are executed in a sequential order during the processing of an HTTP request. 
They play a crucial role in handling various tasks and processing within an application's request-response cycle. 
Middlewares can intercept incoming requests, modify the request or response objects, execute code, and control the flow of the application.

Key Characteristics and Uses of Middlewares:

Order of Execution: Middlewares are executed in the order they are defined, typically through the use of app.use() in Express. 
This allows you to control the flow of operations and apply specific tasks at different stages of the request-response cycle.

Request and Response Manipulation: Middlewares can modify the request and response objects.
They can add data, headers, cookies, and more to these objects, which can be useful for tasks like authentication, data validation, or handling cookies.

Next Function: Middleware functions usually receive a next function as a parameter. Calling next() inside a middleware passes control to the next middleware in the sequence.
This is crucial for the execution flow and allows you to move from one middleware to another.

Error Handling: You can define error-handling middleware using four parameters (err, req, res, next).
These special middlewares are executed when an error occurs during the processing of a request.


üí° **Q.2** Why use Express Over NodeJS ?

Simplicity and Abstraction: Express.js simplifies and abstracts many of the complexities of working with raw Node.js. 
It provides a higher-level API for handling routes, middleware, and other web-related tasks, making it easier and more intuitive to build web applications.

Routing: Express.js provides a robust routing system that helps organize your application's endpoints and manage different HTTP methods (GET, POST, PUT, DELETE, etc.). 
This simplifies the process of defining routes for handling different URLs and HTTP requests.

Middleware: Express.js has a middleware architecture that allows you to easily inject functionality at different stages of the request-response cycle.
Middleware simplifies tasks such as authentication, request parsing, logging, and error handling.

Community and Ecosystem: Express.js has a large and active community, which means there are numerous third-party libraries, plugins, and resources available to help you solve common problems and extend your application's functionality.

üí° **Q.3** What are REST API ?

A REST API, or Representational State Transfer Application Programming Interface, is a set of conventions and architectural principles for designing and interacting with web services. REST is an architectural style that defines a set of constraints to create scalable, stateless, and resource-oriented web APIs.
It is widely used for building web services that enable communication between different software applications over the internet.

Key characteristics and concepts of REST APIs include:

Resources: In a REST API, resources are the main entities that the API exposes. 
Resources can be objects, data, or services that you want to make available to clients. 
Each resource is identified by a unique URL (Uniform Resource Locator).

HTTP Methods: REST APIs use standard HTTP methods to perform actions on resources.
The most common HTTP methods used in REST are GET (retrieve), POST (create), PUT (update), and DELETE (remove).

Stateless: REST APIs are designed to be stateless, meaning that each request from a client to the server should contain all the information necessary for the server to understand and process the request. 
The server doesn't store any information about the client's previous requests.

üí° **Q.4** What is the use of MongoDB?
MongoDB is a popular open-source NoSQL database that is designed to store, retrieve, and manage large volumes of unstructured or semi-structured data.
Unlike traditional relational databases, MongoDB uses a flexible, document-oriented data model that is well-suited for various types of applications and use cases.

Key features and use cases of MongoDB include:

Flexible Data Model: MongoDB uses a document-based data model, where data is stored in JSON-like documents.
This allows you to represent complex, hierarchical, or dynamic data structures without rigid schemas.

Scalability: MongoDB is designed for horizontal scalability, which means you can easily distribute and scale your database across multiple servers or clusters to handle high volumes of data and traffic.

High Performance: MongoDB's architecture is optimized for performance.
It supports features like automatic sharding, indexing, and in-memory storage options to ensure fast data retrieval and queries.

Schema Evolution: With MongoDB's dynamic schema, you can add, modify, or remove fields from documents without affecting the entire database. 
This makes it easier to adapt to changing data requirements over time.

üí° **Q.5**  What is Mongoose and how does it relate to MongoDB?

1. MongoDB:
MongoDB is a NoSQL database that stores data in a flexible, document-oriented format using JSON-like documents. 
It provides a way to store and retrieve data in a scalable and high-performance manner. 
MongoDB is the database system itself.

2. Mongoose:
Mongoose is an ODM library for MongoDB in Node.js. 
It provides a higher-level abstraction over the native MongoDB driver and allows you to work with MongoDB databases in a more intuitive and organized way.
Mongoose simplifies tasks like defining schemas, creating models, and performing database operations.

üí° **Q.6** Build a Server Using Http Module NodeJS with api endpoints for Getting Products Data

      ‚Äò/‚Äô ‚Üí send msg as ‚ÄúWelcome to Men & Women Dummy Data‚Äù

     ‚Äò/men‚Äô ‚Üí send 10 products data of men

     ‚Äò/women‚Äô ‚Üí send 10 products data of women

     ‚Äò/other‚Äô ‚Üí send response as page not found

**Note :** You Can any Product Data

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/68a8b44e-a6af-4a57-83a4-2620c2efda7c/Untitled.png)

</aside>

<aside>
üí° **Q.7** Build a Server that Generate Random Number Using Express
‚Äò/random‚Äô ‚Üí send random number in response {random:10}

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/77914090-b413-4844-8b43-7a244f398073/Untitled.png)

</aside>

<aside>
üí° **Q.8** Create a Backend For Counter Web App with Api Endpoint for Managing Counter Using Express

- ‚Äò/‚Äô ‚Üí send counter data as {counter:counter}
- `/increment` ‚Üí increment counter by 1 and send in response latest data as {counter:counter}
- `/decrement` ‚Üí decrement counter by 1 and send in response latest data as {counter:counter}

**Note:** Using Express is Mandatory for this Question

</aside>

<aside>
üí° **Q.9** You are tasked with building the backend for a Todo web application. The application allows users to create, update, and delete tasks in their to-do list with Api Endpoint as mentioned below

**`/`** -->  send all the todos which are created by user

**`/add`** --> to create todo create a middleware to validate user providing all the mandatory input (task), if user doesn't provide task as input send resp as validation failed

**`/update/:id`**  --> to update todo with Todo Id, after updating send resp as {msg:"todo update successfully",data:allTodos}

**`/delete/:id`** -->  to update todo with Todo id, after deleting send resp as {msg:"todo deleted",data:allTodos}

</aside>

<aside>
üí° **Q.10 Assignment:** Full Stack Blog Web Application (PW Blog) Development using **MERN Stack**

**Description:**
You have been assigned the task of building a full stack blog web application using the MERN (MongoDB, Express.js, React.js, Node.js) stack. The application will allow users to create, read, update, and delete blog posts. Users can also register, log in The backend will handle data storage and retrieval, while the frontend will provide a user-friendly interface for interacting with the application.

**Requirements:**

1. **User Authentication:** Implement user authentication and authorization mechanisms to ensure secure access to the application. Users should be able to register, log in, and log out.
2. **Blog Post Management:** Create endpoints to manage blog posts, including the following functionalities:
    - Display a list of blog posts
    - View detailed information for each blog post
    - Create new blog posts
    - Update existing blog posts
    - Delete blog posts
    
    Note:  User Should be able to delete his own blog Only
    
3. **Database Design**: Design the database schema to store blog posts, user details Use MongoDB  to store and retrieve data efficiently.
4. **API Design**: Define a RESTful API to expose the backend functionalities. Ensure the API endpoints are well-structured, follow best practices, and provide appropriate error handling.
5. **Frontend Development:** Create a intuitive user interface using React.js to interact with the backend API. Implement features such as blog post listing, User Page where he can see his blog post, and blog creation and editing, Login & SignUP Page
6. **Deployment**: Deploy the application to a hosting environment (e.g., Vercel, Netlify) and ensure it is accessible to users.

**Deliverables:**

- A fully functional full stack blog web application built using the MERN stack.
- Source code for the backend and frontend components, properly organized and commented for clarity and maintainability.
- Documentation (readme.md) describing the API endpoints, frontend components, and their usage.
- Any additional instructions or dependencies required to run the application.

Please note that the design and aesthetics of the application's user interface will be handled separately. Your focus should be solely on building the backend and frontend components necessary for the blog functionalities.

Api Endpointsüëá

![pwblog_api endpoint.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/57d5a706-95df-4d16-b3fb-6184c2130a51/pwblog_api_endpoint.png)

1. **Login Page**

![loginPage.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5e667c5b-6598-47f6-9803-c52b3d086cbc/loginPage.png)

1. **Register Page**

![registerPage.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/61ffd5fb-d1f4-41f9-9824-118f980f9b78/registerPage.png)

1. **Home Page**

![homepage.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9217388c-120c-48c3-a5bc-0b458dea1e6e/homepage.png)

1. **Add Blog**
    
    
    ![add blog.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f457c975-5e5a-4f0b-a264-61639d925a7b/add_blog.png)
    
    1. **My Blog Page**
    
    ![myblog.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/02e63473-1326-4ca6-8c35-1678d5fcfce5/myblog.png)
    
    1. Edit Blog/Update Blog
</aside>
