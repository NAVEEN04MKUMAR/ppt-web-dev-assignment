uncompleted: 3,10
# Assignment Questions 6


ðŸ’¡ **Q.1** Whatâ€™s Constructor And Its Purpose?

A constructor in JavaScript is a special method that is automatically called when an object is created from a class or a constructor function. 
It is used to initialize the object's properties and set up its initial state. 
Constructors allow you to define the blueprint for creating objects of a particular type or class.

The purpose of a constructor is to:

Initialize Properties: Constructors are used to set the initial values of an object's properties. 
This ensures that an object is created in a valid and usable state.

Encapsulation: Constructors provide a way to encapsulate the process of object creation and initialization.
This helps in organizing and managing the object's internal state.



ðŸ’¡ **Q.2** Explain This Keyword and Its Purpose?

The this keyword in JavaScript is a special keyword that refers to the current instance of an object or the context in which a function is executed.
The behavior of this depends on how and where it is used, and it allows you to access properties and methods of the current object or context.

Arrow Functions:
Arrow functions have a different behavior for this. They inherit the this value from their containing function or scope.

const person = {
    name: "Alice",
    sayHello: () => {
        console.log(`Hello, my name is ${this.name}`);
    }
};
person.sayHello(); // Output: "Hello, my name is undefined"

Dynamic Context:

The value of this is determined at runtime based on how a function is invoked. 
It can change depending on the calling context, such as when a function is called with different objects or explicitly using functions like call, apply, or bind.

function greet() {
    console.log(`Hello, ${this.name}!`);
}

const person1 = { name: "Alice" };
const person2 = { name: "Bob" };

greet.call(person1); // Output: "Hello, Alice!"
greet.call(person2); // Output: "Hello, Bob!"


ðŸ’¡ **Q.3** Whatâ€™s Call Apply Bind Method & Difference Between them


ðŸ’¡ **Q.4** Explain OOPS ?
Object-Oriented Programming (OOP) is a programming paradigm that focuses on organizing code into objects, which are instances of classes.
OOP promotes the concept of modeling real-world entities, their attributes, and their interactions in a structured and modular way. 
It provides a set of principles and concepts to design and manage software systems more effectively.

ðŸ’¡ **Q.5** Whats Abstraction and Its Purpose?
 It refers to the process of simplifying complex reality by modeling classes of objects or systems that share common attributes or behaviors, while hiding unnecessary details. 
In other words, abstraction allows you to focus on the essential aspects of an object or system while ignoring or abstracting away the non-essential details.

class BankAccount {
    constructor(accountNumber, accountHolder) {
        this.accountNumber = accountNumber;
        this.accountHolder = accountHolder;
        this.balance = 0;
    }

    deposit(amount) {
        if (amount > 0) {
            this.balance += amount;
            console.log(`Deposited $${amount} into account ${this.accountNumber}`);
        } 
}

    withdraw(amount) {
        if (amount > 0 && amount <= this.balance) {
            this.balance -= amount;
            console.log(`Withdrew $${amount} from account ${this.accountNumber}`);
        } 
}
}

// Usage
const account1 = new BankAccount("123456", "John Doe");
account1.deposit(1000);
account1.withdraw(200);

The abstraction allows you to create and manage multiple bank accounts with a consistent and simplified interface, 
without needing to worry about the internal workings of the account.

ðŸ’¡ **Q.6** Whats Polymorphism and Purpose of it?

Polymorphism is a fundamental concept in object-oriented programming that allows objects of different classes to be treated as objects of a common superclass. 
It enables you to write code that can work with objects in a more generic and flexible way, without needing to know the specific type of each object

Driving Interface (Base Class): You define a basic set of rules for how vehicles should be driven.
This includes a method called drive(), which all vehicles must have.

Vehicle Types (Subclasses): You create specific types of vehicles like cars, motorcycles, and bicycles, each following the "driving" rules.
These vehicles have their own unique ways of implementing the drive() method.

Using Polymorphism: Now, when you want to "drive" any vehicle, you don't need to know exactly what type it is. 
You simply use the drive() method, and each vehicle knows how to move according to its type.

Here's how it looks in simple code:

class Vehicle {
    drive() {
        throw new Error("Subclasses must implement drive method.");
    }
}

class Car extends Vehicle {
    drive() {
        return "Driving a car vroom vroom!";
    }
}

class Motorcycle extends Vehicle {
    drive() {
        return "Riding a motorcycle vroom!";
    }
}

}

// Polymorphism in action
function takeVehicleForSpin(vehicle) {
    console.log(vehicle.drive());
}

const car = new Car();
takeVehicleForSpin(car);        // Outputs: Driving a car vroom vroom!

ðŸ’¡ **Q.7**  Whats Inheritance and Purpose of it?

Inheritance in JavaScript refers to the mechanism by which one object can acquire the properties and methods of another object.
It allows you to create a hierarchy of objects where one object (the child or subclass) inherits the attributes and behaviors of another object (the parent or superclass).
In JavaScript, inheritance is implemented using prototypes.

Purpose of Inheritance in JavaScript:

Code Reusability: Inheritance enables you to create new objects based on existing objects, allowing you to reuse code and avoid redundancy. 
Properties and methods defined in a parent object can be inherited by multiple child objects.

Modularity and Organization: Inheritance helps you organize your code by creating a clear structure and hierarchy of objects. 
It promotes a more organized and maintainable codebase by grouping related functionalities together.

// Parent object (superclass)
function Shape(color) {
    this.color = color;
}
Shape.prototype.getColor = function() {
    return this.color;
};

// Child objects (subclasses)
function Circle(color, radius) {
    Shape.call(this, color);
    this.radius = radius;
}

Circle.prototype = Object.create(Shape.prototype);
Circle.prototype.constructor = Circle;

Circle.prototype.getArea = function() {
    return Math.PI * this.radius * this.radius;
};

const redCircle = new Circle("red", 5);
console.log("Color:", redCircle.getColor());
console.log("Area:", redCircle.getArea());

ðŸ’¡ **Q.8** Whats Encapsulation and Purpose of it ?
It refers to the practice of bundling data (attributes) and methods (functions) that operate on that data into a single unit, usually represented by a class.
Encapsulation restricts direct access to the internal state of an object and provides controlled access through well-defined interfaces.
The purpose of encapsulation is to promote data integrity, hide implementation details, and enhance code maintainability and security.
class RemoteControl {
    constructor() {
        this._volume = 50; // Private attribute
    }

    increaseVolume() {
        if (this._volume < 100) {
            this._volume += 10;
        }
    }

    decreaseVolume() {
        if (this._volume > 0) {
            this._volume -= 10;
        }
    }

    getVolume() {
        return this._volume;
    }
}

const remote = new RemoteControl();
console.log(remote._volume); // Direct access prevented

remote.increaseVolume();
console.log(remote.getVolume()); // Output: 60

In this example, the BankAccount class encapsulates the account number and balance as private attributes.
The deposit, withdraw, and getBalance methods provide controlled access to modify and retrieve the account balance.
The use of encapsulation helps protect the integrity of the account's internal state and enforces proper usage of the class

ðŸ’¡ **Q.9** Explain Class in JavaScript?

In JavaScript, a class is a blueprint or template for creating objects with similar properties and methods. 
It is a fundamental concept in Object-Oriented Programming (OOP) that allows you to define the structure and behavior of objects in a structured and reusable way. 
Classes provide a way to create multiple instances (objects) with consistent properties and behaviors.

The syntax for defining a class in JavaScript is as follows:

class ClassName {
    constructor(/* constructor parameters */) {
        // Initialization code
    }

    method1(/* method parameters */) {
        // Method code
    }

    method2(/* method parameters */) {
        // Method code
    }

    // ... more methods
}

constructor:
The constructor is a special method that is automatically called when an object is created from the class. It initializes the object's properties and sets up its initial state. You can pass parameters to the constructor to customize the object's creation.

Methods:
Methods are functions defined within the class that specify the behavior of the objects created from the class. 
These methods can operate on the object's properties and perform various tasks.

Here's an example of defining and using a class in JavaScript

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    greet() {
        console.log(`Hello, my name is ${this.name} and I'm ${this.age} years old.`);
    }
}

// Creating instances of the Person class
const person1 = new Person("Alice", 25);
const person2 = new Person("Bob", 30);

// Calling the greet method on instances
person1.greet(); // Output: "Hello, my name is Alice and I'm 25 years old."
person2.greet(); // Output: "Hello, my name is Bob and I'm 30 years old."

In this example, the Person class is defined with a constructor that initializes the name and age properties.
It also has a greet method that logs a greeting message using the object's properties.
Two instances of the Person class are created, and the greet method is called on each instanc

ðŸ’¡ **Q.10** Whatâ€™s Super Keyword & What it does?

