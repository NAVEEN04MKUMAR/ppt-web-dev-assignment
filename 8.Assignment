
# Assignment Questions 8

<aside>
üí° **Q.1**  Whats React and its pros and cons?


React is an open-source JavaScript library for building user interfaces. Developed and maintained by Facebook, React is widely used to create dynamic, efficient, and reusable UI components for web applications. It follows a component-based architecture, where user interfaces are broken down into smaller, reusable pieces that can be composed together to create complex user interfaces.

Pros of React:

Component Reusability: React promotes the creation of reusable UI components, which simplifies development, improves code maintainability, and speeds up the development process.

Virtual DOM: React uses a virtual DOM to optimize updates to the actual DOM.
This leads to improved performance by minimizing unnecessary reflows and repaints in the browser.

Declarative Syntax: React uses a declarative syntax, making it easier to understand and predict how the UI should look based on the current state of the application.

Cons of React:

Learning Curve: While React's fundamentals are relatively easy to grasp, mastering advanced concepts like state management, context, and hooks may require some learning and practice.

Boilerplate: While React provides a robust foundation, setting up a complete development environment with build tools and configurations can involve some initial setup and boilerplate code.

Complex State Management: Managing complex application states can become challenging, especially in larger applications.
Additional libraries (such as Redux or Mobx) are often used to address this issue.

üí° **Q.2** What do you understand by Virtual Dom?
Real DOM vs. Virtual DOM:
 Virtual DOM is a concept that helps optimize the process of updating and rendering web pages by efficiently managing changes to the user interface without directly manipulating the underlying Real DOM.

üí° **Q.3** Difference between Virtual Dom vs Real Dom

Real DOM (Document Object Model):

The Real DOM is a programming interface provided by browsers, representing the hierarchical structure of a web page's HTML elements.
Whenever there is a change in the state of a web application, the entire Real DOM needs to be recalculated and updated, which can be computationally expensive and lead to performance bottlenecks, especially for complex and dynamic applications.
Directly manipulating the Real DOM can result in slow UI updates and a less responsive user experience.

Virtual DOM:

The Virtual DOM is a concept introduced to optimize UI updates and improve performance by minimizing direct manipulation of the Real DOM.
It is a lightweight, in-memory representation of the Real DOM. When there is a change in the application's state, a new Virtual DOM is created by copying the structure of the Real DOM.
The Virtual DOM is then compared to the previous version of the Virtual DOM (diffing process) to identify the specific changes that occurred in the UI.

üí° **Q.4** Whats component? Types of component

omponents are a fundamental building block in modern web development, as they promote code reusability, modularity, and maintainability.


Container Components:

These components are responsible for fetching and managing data from APIs, Redux stores, or other sources.
Container components handle logic and data manipulation, while presentational components focus on rendering

Higher-Order Components (HOCs):

HOCs are a design pattern used to enhance or modify the behavior of existing components.
HOCs are used for tasks like handling authentication, data fetching, or code reuse.

Class Components:

These are also referred to as stateful components.
They can manage their own internal state using the state object.
Class components have access to lifecycle methods, allowing developers to control behavior at different stages of the component's lifecycle

üí° **Q.5** Difference between class & function based component

1. Syntax:

Class-based Component:

import React, { Component } from 'react';

class MyClassComponent extends Component {
  render() {
    return <div>Hello, I'm a class-based component!</div>;
  }
}

export default MyClassComponent;


Function-based Component:

import React from 'react';

function MyFunctionComponent() {
  return <div>Hello, I'm a function-based component!</div>;
}

export default MyFunctionComponent;

2. State Management:

Class-based Component:
Class components can manage state using the state property. 
You can modify state using setState(), which triggers re-rendering when the state changes.

Function-based Component:
Prior to React 16.8, function components were stateless and couldn't manage state.
With the introduction of React Hooks, function components can now manage state using the useState hook.

3. Lifecycle Methods:

Class-based Component:
Class components have access to a variety of lifecycle methods, such as componentDidMount, componentDidUpdate, and componentWillUnmount. 
These methods allow you to perform actions at different stages of a component's lifecycle.

Function-based Component:
Before Hooks, function components didn't have direct access to lifecycle methods.
With Hooks, you can achieve similar behavior using the useEffect hook, which allows you to perform side effects in function components.

üí° **Q.6** Explain react component life cycle

The React component lifecycle refers to the various stages that a component goes through from its creation to its removal from the DOM. 
Each stage provides an opportunity to perform specific actions or side effects. 
However, it's important to note that with the introduction of React Hooks, some class-based lifecycle methods are being replaced by equivalent effects created with hooks.

1. Mounting:
These methods are called when an instance of a component is being created and inserted into the DOM.

constructor(props): The constructor is called when the component is being initialized. You can set up the initial state and bind methods here

2. Updating:
These methods are called when a component's state or props change.

static getDerivedStateFromProps(props, state): Similar to the mounting phase, it's called when new props are received and returns an updated state

3. Unmounting:
This method is called when a component is being removed from the DOM.

componentWillUnmount(): This method is called just before the component is unmounted and removed from the DOM. 
It's used for cleanup tasks such as cancelling network requests or removing event listeners

4. Error Handling:
These methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.

static getDerivedStateFromError(error): This method is used to handle errors in child components and update state accordingly


üí° **Q.7** Explain Prop Drilling in React & Ways to avoid it

Prop drilling refers to the process of passing down props through multiple levels of nested components to get data from a top-level component to a deeply nested one that needs that data.

// Top-level component
function App() {
  const data = /* some data */;
  return <ParentComponent data={data} />;
}

// Nested component
function ParentComponent({ data }) {
  return <ChildComponent data={data} />;
}

// Deeply nested component that needs the data
function ChildComponent({ data }) {
  return <div>{data}</div>;
}

Ways to Avoid Prop Drilling:

Use Context API:
The Context API allows you to create a centralized store of data that can be accessed by any component in the application without needing to pass props through intermediary components. 
This helps avoid prop drilling and keeps your codebase cleaner.

Redux or Other State Management Libraries:
State management libraries like Redux provide a global state container that can be accessed by any component. 
This eliminates the need for prop drilling and simplifies data sharing.

Use React Router's useParams and useLocation:
If you're passing data related to routing, React Router provides hooks like useParams and useLocation to access route parameters and query parameters without prop drilling


üí° **Q.8** Create a Counter Web App using React

- Develop a web application using React that functions as a counter.
- Include two buttons in the UI:
    1. "Increment" button:
        - On clicking this button, the counter value should be incremented by one.
    2. "Decrement" button:
        - On clicking this button, the counter value should be decremented by one.
- Implement the counter logic using React's state management.
- Ensure that the counter value is displayed in the UI and updates in real-time when incremented or decremented.
- Use appropriate React components and hooks to manage the counter state and handle button click events.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3b3213d6-6918-4e52-9f90-3f973973f9ee/Untitled.png)

</aside>

<aside>
üí° **Q.9**  Develop a **GitHub User Finder** web application using **React** The application should allow users to enter a **GitHub username** and display relevant information about the user, including their avatar and name. The design of the application should follow the layout provided in the image below.

- Use Github Api to get User Data ‚Äúhttps://api.github.com/users‚Äù

![github user find.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fcd43c3b-9f13-4eba-a654-de1e0284d5e6/github_user_find.png)

</aside>

<aside>
üí° **Q.10**  Develop a simple website using React, fetch and display products from the "https://fakestoreapi.com/products" API. The website should have the following features:

- Fetch product data from the "https://fakestoreapi.com/products" API.
- Display the products in a user-friendly UI.
- Show **Three products** in a single row for optimal visibility and layout.
- Use **React** to achieve the desired layout and functionality.
- Ensure that the UI is visually appealing and responsive.
- Implement error handling to handle any issues with API requests.
- Test the website thoroughly to ensure proper functionality and performance.
- Provide clear and concise documentation to guide users on how to interact with the website and understand its features.

**Note**: Refer to the provided image or design specification for the desired layout and styling of the product display in a single row.

</aside>
